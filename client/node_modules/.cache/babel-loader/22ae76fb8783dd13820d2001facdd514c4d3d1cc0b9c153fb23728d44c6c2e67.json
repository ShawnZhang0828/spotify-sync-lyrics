{"ast":null,"code":"var _jsxFileName = \"C:\\\\Study\\\\VS Code\\\\spotify-lyrics-sync\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Header from './components/Header';\nimport Lyrics from './components/Lyrics';\nimport axios from 'axios';\n\n// const CLIENT_ID = \"07f45b95ceac490ba0871336604107e0\"\n// const CLIENT_SECRET = \"2896dd203a234606ab0e2ba2a2aa5ad8\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REFRESH_URL = \"http://localhost:8080/auth/refresh_token/\";\nfunction App() {\n  _s();\n  const getCurrentTrack = async () => {\n    if (window.localStorage.getItem(\"code\") === null) {\n      return;\n    }\n    try {\n      console.log(\"fetching new lyrics\");\n      const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\n        }\n      });\n      if (response !== undefined) {\n        let trackName = response.data.item.name,\n          artistName = response.data.item.artists[0].name,\n          // TODO: could be more than one artists\n          trackID = response.data.item.id,\n          trackImg = response.data.item.album.images[0].url;\n        return {\n          trackName,\n          artistName,\n          trackID,\n          trackImg\n        };\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.log(error);\n      if (error.response.status === 401) {\n        window.localStorage.removeItem(\"access-token\");\n      }\n    }\n  };\n  const handleTrackChange = async () => {\n    // do something when the track changes\n    setCurrentLineIndex(0);\n    setCurrentTime(0);\n    await getLyrics();\n  };\n  const getLyrics = async () => {\n    try {\n      const response = await axios.get(`https://spotify-lyric-api.herokuapp.com/?trackid=${track.trackID}`, {});\n      if (response !== undefined) {\n        var lines = response.data.lines.map(lineObj => {\n          delete lineObj.endTimeMs;\n          delete lineObj.syllables;\n          return lineObj;\n        });\n        setLyrics(lines);\n      } else {\n        setLyrics([{\n          startTimeMs: 0,\n          words: \" \"\n        }]);\n        console.log(\"lyrics not found\");\n        return null;\n      }\n    } catch (error) {\n      setLyrics([{\n        startTimeMs: 0,\n        words: \" \"\n      }]);\n      console.log(\"lyrics not found\");\n      return null;\n    }\n  };\n\n  // const getProgress = async () => {\n  //   const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n  //     headers: {\n  //       Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\n  //     },\n  //   })\n  //   if (response) {\n  //     let trackStatus = response.data.progress_ms\n  //     return trackStatus\n  //   } else {\n  //     return null;\n  //   }\n  // }\n\n  // Call the /refresh_token endpoint every 8 minutes to get a new access token\n  setInterval(() => {\n    console.log(\"refreshing token\");\n    axios.get(REFRESH_URL, {\n      params: {\n        refresh_token: window.localStorage.getItem(\"refresh-token\")\n      }\n    }).then(response => {\n      // Update the access token in your app state or local storage\n      const newAccessToken = response.data.access_token;\n      window.localStorage.setItem(\"access-token\", newAccessToken);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, 8 * 60 * 1000); // 8 minutes in milliseconds\n\n  const [track, setTrack] = useState({});\n  const [lyrics, setLyrics] = useState([]);\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  useEffect(() => {\n    console.log(\"AAAAAA\");\n    const interval = setInterval(async () => {\n      const newTrack = await getCurrentTrack();\n      if (newTrack && JSON.stringify(newTrack) !== JSON.stringify(track)) {\n        setTrack(newTrack);\n      }\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [getCurrentTrack]);\n  useEffect(() => {\n    if (Object.keys(track).length !== 0) {\n      setCurrentLineIndex(0);\n      handleTrackChange();\n    }\n  }, [track]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentTime(prevTime => prevTime + 100);\n      if (track) {\n        const index = lyrics.findIndex(line => line.startTimeMs >= currentTime - 600); // Find the index of the line with a start time greater than or equal to the current time\n        if (index !== -1 && index !== currentLineIndex) {\n          setCurrentLineIndex(index > 0 ? index - 1 : 0);\n        }\n      }\n    }, 100);\n    return () => clearInterval(intervalId);\n  }, [currentTime, lyrics]);\n\n  // useEffect(() => {\n  //   if (lyrics.length > 0) {\n  //     const timer = setInterval(async () => {\n  //       const currentTime = await getProgress(); // Get the current time of the track\n  //       const index = lyrics.findIndex((line) => line.startTimeMs >= currentTime - 600); // Find the index of the line with a start time greater than or equal to the current time\n  //       if (index !== -1 && index !== currentLineIndex) {\n  //         setCurrentLineIndex(index > 0 ? index - 1 : 0);\n  //       }\n  //     }, 500); // Check every 100 milliseconds\n  //     return () => clearTimeout(timer);\n  //   }\n  // }, [lyrics, currentLineIndex]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: lyrics.length > 0 ? /*#__PURE__*/_jsxDEV(Lyrics, {\n      lines: lyrics,\n      currentLineIndex: currentLineIndex,\n      bg_img: track.trackImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 28\n    }, this) : /*#__PURE__*/_jsxDEV(Header, {\n      initToken: window.localStorage.getItem(\"token\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 115\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gXJMmwLacat4m3CPO2HUnxdk6pc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Header","Lyrics","axios","jsxDEV","_jsxDEV","REFRESH_URL","App","_s","getCurrentTrack","window","localStorage","getItem","console","log","response","get","headers","Authorization","undefined","trackName","data","item","name","artistName","artists","trackID","id","trackImg","album","images","url","error","status","removeItem","handleTrackChange","setCurrentLineIndex","setCurrentTime","getLyrics","track","lines","map","lineObj","endTimeMs","syllables","setLyrics","startTimeMs","words","setInterval","params","refresh_token","then","newAccessToken","access_token","setItem","catch","setTrack","lyrics","currentLineIndex","currentTime","interval","newTrack","JSON","stringify","clearInterval","Object","keys","length","intervalId","prevTime","index","findIndex","line","className","children","bg_img","fileName","_jsxFileName","lineNumber","columnNumber","initToken","_c","$RefreshReg$"],"sources":["C:/Study/VS Code/spotify-lyrics-sync/client/src/App.js"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport Header from './components/Header';\nimport Lyrics from './components/Lyrics';\nimport axios from 'axios';\n\n// const CLIENT_ID = \"07f45b95ceac490ba0871336604107e0\"\n// const CLIENT_SECRET = \"2896dd203a234606ab0e2ba2a2aa5ad8\"\nconst REFRESH_URL = \"http://localhost:8080/auth/refresh_token/\"\n\nfunction App() {\n\n  const getCurrentTrack = async () => {\n    if (window.localStorage.getItem(\"code\") === null) {\n      return;\n    }\n    try {\n      console.log(\"fetching new lyrics\");\n      const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\n        },\n      })\n      if (response !== undefined) {\n        let trackName = response.data.item.name,\n            artistName = response.data.item.artists[0].name,   // TODO: could be more than one artists\n            trackID = response.data.item.id,\n            trackImg = response.data.item.album.images[0].url\n        return { trackName, artistName, trackID, trackImg }\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.log(error);\n      if (error.response.status === 401) {\n        window.localStorage.removeItem(\"access-token\")\n      }\n    }\n    \n  }\n\n  const handleTrackChange = async () => {\n    // do something when the track changes\n    setCurrentLineIndex(0);\n    setCurrentTime(0);\n    await getLyrics();\n  };\n\n  const getLyrics = async () => {\n    try {\n      const response = await axios.get(`https://spotify-lyric-api.herokuapp.com/?trackid=${track.trackID}`, {})\n      if (response !== undefined) {\n        var lines = response.data.lines.map(lineObj => {\n          delete lineObj.endTimeMs;\n          delete lineObj.syllables;\n          return lineObj;\n        })\n        setLyrics(lines);\n      } else {\n        setLyrics([{startTimeMs: 0, words: \" \"}]);\n        console.log(\"lyrics not found\");\n        return null\n      }\n    } catch (error) {\n        setLyrics([{startTimeMs: 0, words: \" \"}]);\n        console.log(\"lyrics not found\");\n        return null\n    }\n    \n  }\n\n  // const getProgress = async () => {\n  //   const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n  //     headers: {\n  //       Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\n  //     },\n  //   })\n  //   if (response) {\n  //     let trackStatus = response.data.progress_ms\n  //     return trackStatus\n  //   } else {\n  //     return null;\n  //   }\n  // }\n\n  // Call the /refresh_token endpoint every 8 minutes to get a new access token\n  setInterval(() => {\n    console.log(\"refreshing token\");\n    axios.get(REFRESH_URL, {\n      params: {\n        refresh_token: window.localStorage.getItem(\"refresh-token\")\n      }\n    })\n    .then(response => {\n      // Update the access token in your app state or local storage\n      const newAccessToken = response.data.access_token;\n      window.localStorage.setItem(\"access-token\", newAccessToken)\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }, 8 * 60 * 1000); // 8 minutes in milliseconds\n\n  const [track, setTrack] = useState({});\n  const [lyrics, setLyrics] = useState([]);\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  useEffect(() => {\n    console.log(\"AAAAAA\");\n    const interval = setInterval(async () => {\n      const newTrack = await getCurrentTrack();\n      if (newTrack && JSON.stringify(newTrack) !== JSON.stringify(track)) {\n        setTrack(newTrack);\n      }\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [getCurrentTrack]);\n\n  useEffect(() => {\n    if (Object.keys(track).length !== 0) {\n      setCurrentLineIndex(0);\n      handleTrackChange();\n    }\n  }, [track]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentTime(prevTime => prevTime + 100);\n      if (track) {\n        const index = lyrics.findIndex((line) => line.startTimeMs >= currentTime - 600); // Find the index of the line with a start time greater than or equal to the current time\n        if (index !== -1 && index !== currentLineIndex) {\n          setCurrentLineIndex(index > 0 ? index - 1 : 0);\n        }\n      }\n    }, 100);\n    return () => clearInterval(intervalId);\n  }, [currentTime, lyrics]);\n\n  // useEffect(() => {\n  //   if (lyrics.length > 0) {\n  //     const timer = setInterval(async () => {\n  //       const currentTime = await getProgress(); // Get the current time of the track\n  //       const index = lyrics.findIndex((line) => line.startTimeMs >= currentTime - 600); // Find the index of the line with a start time greater than or equal to the current time\n  //       if (index !== -1 && index !== currentLineIndex) {\n  //         setCurrentLineIndex(index > 0 ? index - 1 : 0);\n  //       }\n  //     }, 500); // Check every 100 milliseconds\n  //     return () => clearTimeout(timer);\n  //   }\n  // }, [lyrics, currentLineIndex]);\n\n  return (\n    <div className=\"container\">\n      {lyrics.length > 0 ? <Lyrics lines={lyrics} currentLineIndex={currentLineIndex} bg_img={track.trackImg}/> : <Header initToken={window.localStorage.getItem(\"token\")}/>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}