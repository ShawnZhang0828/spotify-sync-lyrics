{"ast":null,"code":"var _jsxFileName = \"C:\\\\Study\\\\VS Code\\\\spotify-lyrics-sync\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Header from './components/Header';\nimport Lyrics from './components/Lyrics';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = \"07f45b95ceac490ba0871336604107e0\";\nconst CLIENT_SECRET = \"2896dd203a234606ab0e2ba2a2aa5ad8\";\nfunction App() {\n  _s();\n  const getCurrentTrack = async () => {\n    if (window.localStorage.getItem(\"token\") === null) {\n      return;\n    }\n    try {\n      const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\"token\")}`\n        }\n      });\n      if (response !== undefined) {\n        let trackName = response.data.item.name,\n          artistName = response.data.item.artists[0].name,\n          // TODO: could be more than one artists\n          trackID = response.data.item.id,\n          trackImg = response.data.item.album.images[0].url;\n        return {\n          trackName,\n          artistName,\n          trackID,\n          trackImg\n        };\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.log(error);\n      if (error.response.status === 401) {\n        window.localStorage.removeItem(\"token\");\n      }\n    }\n  };\n  const handleTrackChange = async () => {\n    // do something when the track changes\n    setCurrentLineIndex(0);\n    await getLyrics();\n  };\n  const getLyrics = async () => {\n    try {\n      const response = await axios.get(`https://spotify-lyric-api.herokuapp.com/?trackid=${track.trackID}`, {});\n      if (response !== undefined) {\n        var lines = response.data.lines.map(lineObj => {\n          delete lineObj.endTimeMs;\n          delete lineObj.syllables;\n          return lineObj;\n        });\n        setLyrics(lines);\n      } else {\n        setLyrics([{\n          startTimeMs: 0,\n          words: \" \"\n        }]);\n        console.log(\"lyrics not found\");\n      }\n    } catch (error) {\n      setLyrics([{\n        startTimeMs: 0,\n        words: \" \"\n      }]);\n      console.log(\"lyrics not found\");\n    }\n  };\n  const getProgress = async () => {\n    const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      headers: {\n        Authorization: `Bearer ${window.localStorage.getItem(\"token\")}`\n      }\n    });\n    if (response) {\n      let trackStatus = response.data.progress_ms;\n      return trackStatus;\n    } else {\n      return null;\n    }\n  };\n\n  // const refreshToken = async () => {\n  //   try {\n  //     const response = await axios.post({\n  //       url: 'https://accounts.spotify.com/api/token',\n  //       headers: { 'Authorization': 'Basic ' + (CLIENT_ID + ':' + CLIENT_SECRET).toString('base64') },\n  //       form: {\n  //         grant_type: 'refresh_token',\n  //         refresh_token: window.localStorage.getItem(\"refresh-token\")\n  //       },\n  //       json: true\n  //     });\n  //     const newAccessToken = response.data.access_token;\n  //     window.localStorage.setItem('token', newAccessToken);\n  //   } catch (error) {\n  //     // console.log('Error refreshing token:', window.localStorage.getItem(\"refresh-token\"));\n  //   }\n  // };\n\n  // // Refresh token every 10 minutes\n  // setInterval(() => {\n  //   refreshToken();\n  // }, 8 * 1000); // 10 minutes in milliseconds\n\n  const [track, setTrack] = useState({});\n  const [lyrics, setLyrics] = useState({});\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const newTrack = await getCurrentTrack();\n      if (newTrack && JSON.stringify(newTrack) !== JSON.stringify(track)) {\n        setTrack(newTrack);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [getCurrentTrack]);\n  useEffect(() => {\n    if (Object.keys(track).length !== 0) {\n      setCurrentLineIndex(0);\n      handleTrackChange();\n    }\n  }, [track]);\n  useEffect(() => {\n    if (lyrics.length > 0) {\n      const timer = setInterval(async () => {\n        const currentTime = await getProgress(); // Get the current time of the track\n        const index = lyrics.findIndex(line => line.startTimeMs >= currentTime); // Find the index of the line with a start time greater than or equal to the current time\n        if (index !== -1 && index !== currentLineIndex) {\n          setCurrentLineIndex(index > 0 ? index - 1 : 0);\n        }\n      }, 300); // Check every 100 milliseconds\n      return () => clearTimeout(timer);\n    }\n  }, [lyrics, currentLineIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: lyrics.length > 0 ? /*#__PURE__*/_jsxDEV(Lyrics, {\n      lines: lyrics,\n      currentLineIndex: currentLineIndex,\n      bg_img: track.trackImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 28\n    }, this) : /*#__PURE__*/_jsxDEV(Header, {\n      initToken: window.localStorage.getItem(\"token\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 115\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DRBCBaxqHhRerBAnZZh7smhpVGI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Header","Lyrics","axios","jsxDEV","_jsxDEV","CLIENT_ID","CLIENT_SECRET","App","_s","getCurrentTrack","window","localStorage","getItem","response","get","headers","Authorization","undefined","trackName","data","item","name","artistName","artists","trackID","id","trackImg","album","images","url","error","console","log","status","removeItem","handleTrackChange","setCurrentLineIndex","getLyrics","track","lines","map","lineObj","endTimeMs","syllables","setLyrics","startTimeMs","words","getProgress","trackStatus","progress_ms","setTrack","lyrics","currentLineIndex","interval","setInterval","newTrack","JSON","stringify","clearInterval","Object","keys","length","timer","currentTime","index","findIndex","line","clearTimeout","className","children","bg_img","fileName","_jsxFileName","lineNumber","columnNumber","initToken","_c","$RefreshReg$"],"sources":["C:/Study/VS Code/spotify-lyrics-sync/client/src/App.js"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport Header from './components/Header';\nimport Lyrics from './components/Lyrics';\nimport axios from 'axios';\n\nconst CLIENT_ID = \"07f45b95ceac490ba0871336604107e0\"\nconst CLIENT_SECRET = \"2896dd203a234606ab0e2ba2a2aa5ad8\"\n\nfunction App() {\n\n  const getCurrentTrack = async () => {\n    if (window.localStorage.getItem(\"token\") === null) {\n      return;\n    }\n    try {\n      const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\"token\")}`\n        },\n      })\n      if (response !== undefined) {\n        let trackName = response.data.item.name,\n            artistName = response.data.item.artists[0].name,   // TODO: could be more than one artists\n            trackID = response.data.item.id,\n            trackImg = response.data.item.album.images[0].url\n        return { trackName, artistName, trackID, trackImg }\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.log(error);\n      if (error.response.status === 401) {\n        window.localStorage.removeItem(\"token\")\n      }\n    }\n    \n  }\n\n  const handleTrackChange = async () => {\n    // do something when the track changes\n    setCurrentLineIndex(0);\n    await getLyrics();\n  };\n\n  const getLyrics = async () => {\n    try {\n      const response = await axios.get(`https://spotify-lyric-api.herokuapp.com/?trackid=${track.trackID}`, {})\n      if (response !== undefined) {\n        var lines = response.data.lines.map(lineObj => {\n          delete lineObj.endTimeMs;\n          delete lineObj.syllables;\n          return lineObj;\n        })\n        setLyrics(lines);\n      } else {\n        setLyrics([{startTimeMs: 0, words: \" \"}]);\n        console.log(\"lyrics not found\");\n      }\n    } catch (error) {\n        setLyrics([{startTimeMs: 0, words: \" \"}]);\n        console.log(\"lyrics not found\");\n    }\n    \n    \n  }\n\n  const getProgress = async () => {\n    const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      headers: {\n        Authorization: `Bearer ${window.localStorage.getItem(\"token\")}`\n      },\n    })\n    if (response) {\n      let trackStatus = response.data.progress_ms\n      return trackStatus\n    } else {\n      return null;\n    }\n  }\n\n  // const refreshToken = async () => {\n  //   try {\n  //     const response = await axios.post({\n  //       url: 'https://accounts.spotify.com/api/token',\n  //       headers: { 'Authorization': 'Basic ' + (CLIENT_ID + ':' + CLIENT_SECRET).toString('base64') },\n  //       form: {\n  //         grant_type: 'refresh_token',\n  //         refresh_token: window.localStorage.getItem(\"refresh-token\")\n  //       },\n  //       json: true\n  //     });\n  //     const newAccessToken = response.data.access_token;\n  //     window.localStorage.setItem('token', newAccessToken);\n  //   } catch (error) {\n  //     // console.log('Error refreshing token:', window.localStorage.getItem(\"refresh-token\"));\n  //   }\n  // };\n  \n  // // Refresh token every 10 minutes\n  // setInterval(() => {\n  //   refreshToken();\n  // }, 8 * 1000); // 10 minutes in milliseconds\n\n  const [track, setTrack] = useState({});\n  const [lyrics, setLyrics] = useState({});\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const newTrack = await getCurrentTrack();\n      if (newTrack && JSON.stringify(newTrack) !== JSON.stringify(track)) {\n        setTrack(newTrack);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [getCurrentTrack]);\n\n  useEffect(() => {\n    if (Object.keys(track).length !== 0) {\n      setCurrentLineIndex(0);\n      handleTrackChange();\n    }\n  }, [track]);\n\n  useEffect(() => {\n    if (lyrics.length > 0) {\n      const timer = setInterval(async () => {\n        const currentTime = await getProgress(); // Get the current time of the track\n        const index = lyrics.findIndex((line) => line.startTimeMs >= currentTime); // Find the index of the line with a start time greater than or equal to the current time\n        if (index !== -1 && index !== currentLineIndex) {\n          setCurrentLineIndex(index > 0 ? index - 1 : 0);\n        }\n      }, 300); // Check every 100 milliseconds\n      return () => clearTimeout(timer);\n    }\n  }, [lyrics, currentLineIndex]);\n\n  return (\n    <div className=\"container\">\n      {lyrics.length > 0 ? <Lyrics lines={lyrics} currentLineIndex={currentLineIndex} bg_img={track.trackImg}/> : <Header initToken={window.localStorage.getItem(\"token\")}/>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}