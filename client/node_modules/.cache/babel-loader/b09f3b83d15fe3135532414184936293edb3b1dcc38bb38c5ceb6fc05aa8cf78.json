{"ast":null,"code":"var _jsxFileName = \"C:\\\\Study\\\\VS Code\\\\spotify-lyrics-sync\\\\client\\\\src\\\\components\\\\Lyrics.js\",\n  _s = $RefreshSig$();\nimport \"../styles/lyrics.css\";\nimport ToolBar from \"./ToolBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Lyrics(_ref) {\n  _s();\n  let {\n    lines,\n    currentLineIndex,\n    bg_img\n  } = _ref;\n  var startIndex = Math.max(currentLineIndex - 2, 0);\n  startIndex = Math.min(startIndex, lines.length - 6);\n  var endIndex = startIndex + 4;\n  var displayedLines = lines.slice(startIndex, endIndex + 1);\n  if (displayedLines.length === 0) {\n    currentLineIndex = 2;\n    const myArray = Array.from({\n      length: 5\n    }, () => ({\n      startTimeMs: 0,\n      words: \"  \"\n    }));\n    displayedLines = myArray;\n    displayedLines[2].words = \"Lyrics Not Found.\";\n    startIndex = 0; // display lyrics not found as bold font\n  }\n\n  const handleMouseOver = () => {\n    setShowToolbar(true);\n  };\n  const handleMouseOut = () => {\n    setShowToolbar(false);\n  };\n  const [showToolbar, setShowToolbar] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lyrics-container\",\n    style: {\n      backgroundImage: `url(${bg_img})`\n    },\n    onMouseOver: handleMouseOver,\n    onMouseOut: handleMouseOut,\n    children: [showToolbar && /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 29\n    }, this), displayedLines.map((line, index) => {\n      const lineIndex = startIndex + index;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `lyrics-line ${currentLineIndex === lineIndex ? \"current-line\" : \"\"}`,\n        children: line.words\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 24\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(Lyrics, \"xIOxAFpPGaxZW+gQt/gBqIuJ+jA=\");\n_c = Lyrics;\nexport default Lyrics;\nvar _c;\n$RefreshReg$(_c, \"Lyrics\");","map":{"version":3,"names":["ToolBar","jsxDEV","_jsxDEV","Lyrics","_ref","_s","lines","currentLineIndex","bg_img","startIndex","Math","max","min","length","endIndex","displayedLines","slice","myArray","Array","from","startTimeMs","words","handleMouseOver","setShowToolbar","handleMouseOut","showToolbar","useState","className","style","backgroundImage","onMouseOver","onMouseOut","children","Toolbar","fileName","_jsxFileName","lineNumber","columnNumber","map","line","index","lineIndex","_c","$RefreshReg$"],"sources":["C:/Study/VS Code/spotify-lyrics-sync/client/src/components/Lyrics.js"],"sourcesContent":["import \"../styles/lyrics.css\"\r\nimport ToolBar from \"./ToolBar\";\r\n\r\nfunction Lyrics({ lines, currentLineIndex, bg_img }) {\r\n    var startIndex = Math.max(currentLineIndex - 2, 0);\r\n    startIndex = Math.min(startIndex, lines.length - 6)\r\n    var endIndex = startIndex + 4;\r\n\r\n    var displayedLines = lines.slice(startIndex, endIndex + 1);\r\n    if (displayedLines.length === 0) {\r\n        currentLineIndex = 2;\r\n        const myArray = Array.from({ length: 5 }, () => ({ startTimeMs: 0, words: \"  \" }));\r\n        displayedLines = myArray;\r\n        displayedLines[2].words = \"Lyrics Not Found.\";\r\n        startIndex = 0;     // display lyrics not found as bold font\r\n    }\r\n\r\n    const handleMouseOver = () => {\r\n        setShowToolbar(true);\r\n      };\r\n    \r\n      const handleMouseOut = () => {\r\n        setShowToolbar(false);\r\n      };\r\n\r\n    const [showToolbar, setShowToolbar] = useState(false);\r\n\r\n    return (\r\n        <div className=\"lyrics-container\" style={{ backgroundImage: `url(${bg_img})` }} onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n            {showToolbar && <Toolbar />}\r\n            {displayedLines.map((line, index) => {\r\n                const lineIndex = startIndex + index;\r\n                return <div key={index} className={`lyrics-line ${currentLineIndex === lineIndex ? \"current-line\" : \"\"}`}>{line.words}</div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Lyrics"],"mappings":";;AAAA,OAAO,sBAAsB;AAC7B,OAAOA,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,MAAMA,CAAAC,IAAA,EAAsC;EAAAC,EAAA;EAAA,IAArC;IAAEC,KAAK;IAAEC,gBAAgB;IAAEC;EAAO,CAAC,GAAAJ,IAAA;EAC/C,IAAIK,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACJ,gBAAgB,GAAG,CAAC,EAAE,CAAC,CAAC;EAClDE,UAAU,GAAGC,IAAI,CAACE,GAAG,CAACH,UAAU,EAAEH,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC;EACnD,IAAIC,QAAQ,GAAGL,UAAU,GAAG,CAAC;EAE7B,IAAIM,cAAc,GAAGT,KAAK,CAACU,KAAK,CAACP,UAAU,EAAEK,QAAQ,GAAG,CAAC,CAAC;EAC1D,IAAIC,cAAc,CAACF,MAAM,KAAK,CAAC,EAAE;IAC7BN,gBAAgB,GAAG,CAAC;IACpB,MAAMU,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEN,MAAM,EAAE;IAAE,CAAC,EAAE,OAAO;MAAEO,WAAW,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;IAClFN,cAAc,GAAGE,OAAO;IACxBF,cAAc,CAAC,CAAC,CAAC,CAACM,KAAK,GAAG,mBAAmB;IAC7CZ,UAAU,GAAG,CAAC,CAAC,CAAK;EACxB;;EAEA,MAAMa,eAAe,GAAGA,CAAA,KAAM;IAC1BC,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BD,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAEH,MAAM,CAACE,WAAW,EAAEF,cAAc,CAAC,GAAGG,QAAQ,CAAC,KAAK,CAAC;EAErD,oBACIxB,OAAA;IAAKyB,SAAS,EAAC,kBAAkB;IAACC,KAAK,EAAE;MAAEC,eAAe,EAAG,OAAMrB,MAAO;IAAG,CAAE;IAACsB,WAAW,EAAER,eAAgB;IAACS,UAAU,EAAEP,cAAe;IAAAQ,QAAA,GACpIP,WAAW,iBAAIvB,OAAA,CAAC+B,OAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,EAC1BtB,cAAc,CAACuB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MACjC,MAAMC,SAAS,GAAGhC,UAAU,GAAG+B,KAAK;MACpC,oBAAOtC,OAAA;QAAiByB,SAAS,EAAG,eAAcpB,gBAAgB,KAAKkC,SAAS,GAAG,cAAc,GAAG,EAAG,EAAE;QAAAT,QAAA,EAAEO,IAAI,CAAClB;MAAK,GAApGmB,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAsG;IAChI,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEd;AAAChC,EAAA,CAjCQF,MAAM;AAAAuC,EAAA,GAANvC,MAAM;AAmCf,eAAeA,MAAM;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}