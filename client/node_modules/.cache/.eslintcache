[{"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\index.js":"1","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\App.js":"2","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\reportWebVitals.js":"3","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Lyrics.js":"4","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Header.js":"5","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\LoginButton.js":"6","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\ToolBar.js":"7","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\ToolButton.js":"8","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Setting.js":"9"},{"size":535,"mtime":1681500681125,"results":"10","hashOfConfig":"11"},{"size":6651,"mtime":1681780257496,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1681500681292,"results":"13","hashOfConfig":"11"},{"size":4700,"mtime":1681805194372,"results":"14","hashOfConfig":"11"},{"size":1576,"mtime":1681768881199,"results":"15","hashOfConfig":"11"},{"size":188,"mtime":1681683507134,"results":"16","hashOfConfig":"11"},{"size":3101,"mtime":1681797172939,"results":"17","hashOfConfig":"11"},{"size":289,"mtime":1681773848815,"results":"18","hashOfConfig":"11"},{"size":1062,"mtime":1681803235998,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"ot4rff",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\index.js",[],[],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\App.js",["49","50"],[],"import {useEffect, useState} from 'react';\nimport Header from './components/Header';\nimport Lyrics from './components/Lyrics';\nimport axios from 'axios';\n\n// const CLIENT_ID = \"07f45b95ceac490ba0871336604107e0\"\n// const CLIENT_SECRET = \"2896dd203a234606ab0e2ba2a2aa5ad8\"\nconst REFRESH_URL = \"http://localhost:8080/auth/refresh_token/\"\n\nfunction App() {\n\n  // get track information about the currently playing track\n  const getCurrentTrack = async () => {\n    if (window.localStorage.getItem(\"code\") === null) {\n      return;\n    }\n    try {\n      // send a request to the spotify api\n      const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\n        },\n      })\n      if (response !== undefined && response.status !== 204) {\n        let trackName = response.data.item.name,\n            artistName = response.data.item.artists[0].name,   // TODO: could be more than one artists\n            trackID = response.data.item.id,\n            trackImg = response.data.item.album.images[0].url\n        return { trackName, artistName, trackID, trackImg }\n      } else if (response.status === 204) {      // return same track for a 204 (success no content error)\n        let trackName = track.trackName,\n            artistName = track.artistName,\n            trackID = track.trackID,\n            trackImg = track.trackImg\n        return { trackName, artistName, trackID, trackImg }\n      }else {\n        return null;\n      }\n    } catch (error) {\n      console.log(error);\n      // if (error.response.status === 401) {\n      //   window.localStorage.removeItem(\"access-token\")\n      // }\n    }\n    \n  }\n\n  // get the progress of the current track\n  const getProgress = async () => {\n    // don't send request if the user is not logged in\n    if (window.localStorage.getItem(\"code\") === null) {\n      return;\n    }\n    try {\n      // send request to the spotify api\n      const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\n        },\n      })\n      if (response !== undefined) {\n        let startTime = response.data.progress_ms   // get current progress\n        window.localStorage.setItem(\"is-playing\", response.data.is_playing)\n        return startTime\n      } else {\n        window.localStorage.setItem(\"is-playing\", \"false\")\n        return null;\n      }\n    } catch (error) {\n      console.log(error);\n      if (error.response.status === 401) {\n        window.localStorage.removeItem(\"access-token\")\n      }\n    }\n  }\n\n  // triggered everytime a new track is played\n  const handleTrackChange = async () => {\n    setCurrentLineIndex(0);     // lyrics line index reset\n    setCurrentTime(await getProgress());      // to align with lyrics timestamp\n    setTractStartTime(Date.now());      // use real time to keep track of the progress of the track\n    await getLyrics();    // fetch lyrics of the current track\n  };\n\n  // get lyrics of the current track\n  const getLyrics = async () => {\n    try {\n      // send request to the spotify api\n      const response = await axios.get(`https://spotify-lyric-api.herokuapp.com/?trackid=${track.trackID}`, {})\n      if (response !== undefined) {\n        // remove unnecessary information\n        var lines = response.data.lines.map(lineObj => {\n          delete lineObj.endTimeMs;\n          delete lineObj.syllables;\n          return lineObj;\n        })\n        setLyrics(lines);   // update lyrics\n      } else {\n        // update lyrics to empty words if cannot find lyrics for the current track\n        setLyrics([{startTimeMs: 0, words: \" \"}]);\n        console.log(\"lyrics not found\");\n        return null\n      }\n    } catch (error) {\n        setLyrics([{startTimeMs: 0, words: \" \"}]);\n        console.log(\"lyrics not found\");\n        return null\n    }\n    \n  }\n\n  // refresh token so that the user stays logged in\n  const refreshToken = async () => {\n    console.log(\"refreshing token\");\n    try {\n      // send request through express API\n      let response = await axios.get(REFRESH_URL, {\n        params: {\n          refresh_token: window.localStorage.getItem(\"refresh-token\")\n        }\n      })\n      // Update the access token in your app state or local storage\n      const newAccessToken = response.data.access_token;\n      window.localStorage.setItem(\"access-token\", newAccessToken)\n      console.log(\"successfully refreshed token\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // initialize state variables\n  const [track, setTrack] = useState({});\n  const [lyrics, setLyrics] = useState([]);\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [trackStartTime, setTractStartTime] = useState(0);\n\n  // triggered at every track change\n  useEffect(() => {\n    if (Object.keys(track).length !== 0) {\n      setCurrentLineIndex(0);\n      handleTrackChange();\n      refreshToken();   // refresh the access token after every song\n    }\n  }, [track]);\n\n  // general synchronization\n  useEffect(() => {\n    // asynchronze function to fetch a new track\n    const fetchNewTrack = async () => {\n      const newTrack = await getCurrentTrack();\n      if (newTrack && JSON.stringify(newTrack) !== JSON.stringify(track)) {\n        setTrack(newTrack);\n      }\n    };\n\n    const intervalId = setInterval(async () => {\n      // setCurrentTime(Date.now() - trackStartTime);\n      var progress = Date.now() - trackStartTime + currentTime;\n      if (track) {\n        const index = lyrics.findIndex((line) => line.startTimeMs >= progress); // Find the index of the line with a start time greater than or equal to the current time\n        if (index !== -1 && index !== currentLineIndex) {\n          setCurrentLineIndex(index > 0 ? index - 1 : 0);\n        }\n      }\n      \n      // check for new track only every two seconds\n      if (progress % 2500 < 100) {\n        fetchNewTrack();\n      }\n\n      // correct synchronization every five seconds\n      if (progress % 5000 < 100) {\n        setCurrentTime(await getProgress());\n        setTractStartTime(Date.now());\n      }\n    }, 100);\n    return () => clearInterval(intervalId);\n  }, [currentTime, lyrics, trackStartTime]);\n\n  // render page elements\n  return (\n    <div className=\"container\">\n      {lyrics.length > 0 ? <Lyrics lines={lyrics} currentLineIndex={currentLineIndex} bg_img={track.trackImg}/> : <Header initToken={window.localStorage.getItem(\"token\")}/>}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\reportWebVitals.js",[],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Lyrics.js",["51","52"],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Header.js",[],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\LoginButton.js",[],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\ToolBar.js",["53"],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\ToolButton.js",[],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Setting.js",["54"],[],{"ruleId":"55","severity":1,"message":"56","line":145,"column":6,"nodeType":"57","endLine":145,"endColumn":13,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":179,"column":6,"nodeType":"57","endLine":179,"endColumn":43,"suggestions":"60"},{"ruleId":"55","severity":1,"message":"61","line":58,"column":9,"nodeType":"62","endLine":58,"endColumn":48},{"ruleId":"55","severity":1,"message":"63","line":75,"column":8,"nodeType":"57","endLine":75,"endColumn":42,"suggestions":"64"},{"ruleId":"55","severity":1,"message":"61","line":74,"column":9,"nodeType":"62","endLine":74,"endColumn":50},{"ruleId":"65","severity":1,"message":"66","line":15,"column":12,"nodeType":"67","messageId":"68","endLine":15,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleTrackChange'. Either include it or remove the dependency array.","ArrayExpression",["69"],"React Hook useEffect has missing dependencies: 'currentLineIndex', 'getCurrentTrack', and 'track'. Either include them or remove the dependency array.",["70"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has missing dependencies: 'currentHiragana' and 'hiragana'. Either include them or remove the dependency array.",["71"],"no-unused-vars","'hiragana' is assigned a value but never used.","Identifier","unusedVar",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [handleTrackChange, track]",{"range":"78","text":"79"},"Update the dependencies array to be: [currentLineIndex, currentTime, getCurrentTrack, lyrics, track, trackStartTime]",{"range":"80","text":"81"},"Update the dependencies array to be: [currentLineIndex, convertedLines, hiragana, currentHiragana]",{"range":"82","text":"83"},[5152,5159],"[handleTrackChange, track]",[6328,6365],"[currentLineIndex, currentTime, getCurrentTrack, lyrics, track, trackStartTime]",[2723,2757],"[currentLineIndex, convertedLines, hiragana, currentHiragana]"]