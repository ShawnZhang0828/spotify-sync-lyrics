[{"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\index.js":"1","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\App.js":"2","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\reportWebVitals.js":"3","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Lyrics.js":"4","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Header.js":"5","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\LoginButton.js":"6","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\ToolBar.js":"7","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\ToolButton.js":"8","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Setting.js":"9"},{"size":535,"mtime":1681500681125,"results":"10","hashOfConfig":"11"},{"size":7020,"mtime":1682296164872,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1681500681292,"results":"13","hashOfConfig":"11"},{"size":9304,"mtime":1683411458199,"results":"14","hashOfConfig":"11"},{"size":1598,"mtime":1682191776613,"results":"15","hashOfConfig":"11"},{"size":188,"mtime":1681683507134,"results":"16","hashOfConfig":"11"},{"size":4041,"mtime":1682061328415,"results":"17","hashOfConfig":"11"},{"size":289,"mtime":1681773848815,"results":"18","hashOfConfig":"11"},{"size":2282,"mtime":1682057069314,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"ot4rff",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\index.js",[],[],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\App.js",["51","52","53"],[],"import {useEffect, useState} from 'react';\nimport Header from './components/Header';\nimport Lyrics from './components/Lyrics';\nimport axios from 'axios';\n\n// const CLIENT_ID = \"07f45b95ceac490ba0871336604107e0\"\n// const CLIENT_SECRET = \"2896dd203a234606ab0e2ba2a2aa5ad8\"\nconst REFRESH_URL = \"http://localhost:8080/auth/refresh_token/\"\n\nfunction App() {\n\n  // get track information about the currently playing track\n  const getCurrentTrack = async () => {\n    if (window.localStorage.getItem(\"code\") === null) {\n      return;\n    }\n    try {\n      // send a request to the spotify api\n      const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\n        },\n      })\n      if (response !== undefined && response.status !== 204) {\n        let trackName = response.data.item.name,\n            artistName = response.data.item.artists[0].name,   // TODO: could be more than one artists\n            trackID = response.data.item.id,\n            trackImg = response.data.item.album.images[0].url\n        return { trackName, artistName, trackID, trackImg }\n      } else if (response.status === 204) {      // return same track for a 204 (success no content error)\n        let trackName = track.trackName,\n            artistName = track.artistName,\n            trackID = track.trackID,\n            trackImg = track.trackImg\n        return { trackName, artistName, trackID, trackImg }\n      }else {\n        return null;\n      }\n    } catch (error) {\n      console.log(error);\n      // if (error.response.status === 401) {\n      //   window.localStorage.removeItem(\"access-token\")\n      // }\n    }\n    \n  }\n\n  // get the progress of the current track\n  const getProgress = async () => {\n    // don't send request if the user is not logged in\n    if (window.localStorage.getItem(\"code\") === null) {\n      return;\n    }\n    try {\n      // send request to the spotify api\n      const response = await axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\n        },\n      })\n      if (response !== undefined) {\n        let startTime = response.data.progress_ms   // get current progress\n        window.localStorage.setItem(\"is-playing\", response.data.is_playing)\n        return startTime\n      } else {\n        window.localStorage.setItem(\"is-playing\", \"false\")\n        return null;\n      }\n    } catch (error) {\n      console.log(error);\n      if (error.response.status === 401) {\n        window.localStorage.removeItem(\"code\")\n        window.localStorage.removeItem(\"access-token\")\n        window.localStorage.removeItem(\"refresh-token\")\n      }\n    }\n  }\n\n  // triggered everytime a new track is played\n  const handleTrackChange = async () => {\n    setCurrentLineIndex(0);     // lyrics line index reset\n    setCurrentTime(await getProgress());      // to align with lyrics timestamp\n    setTractStartTime(Date.now());      // use real time to keep track of the progress of the track\n    await getLyrics();    // fetch lyrics of the current track\n  };\n\n  // get lyrics of the current track\n  const getLyrics = async () => {\n    // TODO: handle un-synced lyrics\n    try {\n      // send request to the spotify api\n      const response = await axios.get(`https://spotify-lyric-api.herokuapp.com/?trackid=${track.trackID}`, {})\n      if (response !== undefined) {\n        // remove unnecessary information\n        var lines = response.data.lines.map(lineObj => {\n          delete lineObj.endTimeMs;\n          delete lineObj.syllables;\n          return lineObj;\n        })\n        setLyrics(lines);   // update lyrics\n      } else {\n        console.log(response);\n        return null\n      }\n    } catch (error) {\n        const emptyLyrics = Array.from({ length: 5 }, () => ({ startTimeMs: 0, words: \"\" }));\n        var lyrics = emptyLyrics;\n        lyrics[2].words = \"Lyrics Not Found.\";\n        setLyrics(lyrics);\n        console.log(\"lyrics not found 2\");\n        return null\n    }\n    \n  }\n\n  // refresh token so that the user stays logged in\n  const refreshToken = async () => {\n    console.log(\"refreshing token\");\n    try {\n      // send request through express API\n      let response = await axios.get(REFRESH_URL, {\n        params: {\n          refresh_token: window.localStorage.getItem(\"refresh-token\")\n        }\n      })\n      // Update the access token in your app state or local storage\n      const newAccessToken = response.data.access_token;\n      window.localStorage.setItem(\"access-token\", newAccessToken)\n      console.log(\"successfully refreshed token\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // initialize state variables\n  const [track, setTrack] = useState({});\n  const [lyrics, setLyrics] = useState([]);\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [trackStartTime, setTractStartTime] = useState(0);\n\n  // triggered at every track change\n  useEffect(() => {\n    if (Object.keys(track).length !== 0) {\n      setCurrentLineIndex(0);\n      handleTrackChange();\n      refreshToken();   // refresh the access token after every song\n    }\n  }, [track]);\n\n  // general synchronization\n  useEffect(() => {\n    // asynchronze function to fetch a new track\n    const fetchNewTrack = async () => {\n      const newTrack = await getCurrentTrack();\n      if (newTrack && JSON.stringify(newTrack) !== JSON.stringify(track)) {\n        setTrack(newTrack);\n      }\n    };\n\n    const intervalId = setInterval(async () => {\n      // setCurrentTime(Date.now() - trackStartTime);\n      var progress = Date.now() - trackStartTime + currentTime - 500;\n      if (track) {\n        const index = lyrics.findIndex((line) => line.startTimeMs >= progress); // Find the index of the line with a start time greater than or equal to the current time\n        if (index !== -1 && index !== currentLineIndex) {\n          setCurrentLineIndex(index > 0 ? index - 1 : 0);\n        }\n      }\n      \n      // check for new track only every two seconds\n      if (progress % 2500 < 100) {\n        fetchNewTrack();\n      }\n\n      // correct synchronization every five seconds\n      if (progress % 5000 < 100) {\n        let trackProgress = await getProgress();\n        if (trackProgress !== undefined) {\n          setCurrentTime(trackProgress);\n        }\n        setTractStartTime(Date.now());\n      }\n    }, 100);\n    return () => clearInterval(intervalId);\n  }, [currentTime, lyrics, trackStartTime]);\n\n  useEffect(() => {\n    if (window.localStorage.getItem('refresh-token') === '1') {\n      setLyrics([]);\n    }\n  }, [window.localStorage.getItem('refresh-token')])\n\n  // render page elements\n  return (\n    <div className=\"container\">\n      {lyrics.length > 0 ? <Lyrics lines={lyrics} currentLineIndex={currentLineIndex} bg_img={track.trackImg}/> : <Header />}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\reportWebVitals.js",[],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Lyrics.js",["54","55","56","57","58"],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Header.js",["59"],[],"import {useEffect, useState} from 'react'\r\nimport LoginButton from \"./LoginButton\"\r\nimport '../styles/login.css'\r\n\r\n// const CLIENT_ID = \"07f45b95ceac490ba0871336604107e0\"\r\n// const CLIENT_SECRET = \"2896dd203a234606ab0e2ba2a2aa5ad8\"\r\n// const SCOPE = \"user-read-currently-playing\"\r\nconst LOGIN_URI = \"http://localhost:8080/auth/login\"\r\n// const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\r\n// const RESPONSE_TYPE = \"code\"\r\n\r\nconst Header = ({ props }) => {\r\n\r\n  const logout = async () => {\r\n    setCode(\"\")\r\n    window.localStorage.removeItem(\"code\")\r\n    window.localStorage.removeItem(\"access-token\")\r\n    window.localStorage.removeItem(\"refresh_token\")\r\n  }\r\n  \r\n  const [code, setCode] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    const search = window.location.search\r\n    let code = window.localStorage.getItem(\"code\")\r\n\r\n    if (!code && search) {\r\n      const urlParams = new URLSearchParams(window.location.search);\r\n      console.log(urlParams);\r\n\r\n      window.localStorage.setItem(\"code\", urlParams.get('code'))\r\n      window.localStorage.setItem(\"access-token\", urlParams.get('access_token'))\r\n      window.localStorage.setItem(\"refresh-token\", urlParams.get('refresh_token'))\r\n      \r\n    }\r\n\r\n    setCode(code)\r\n  }, []);\r\n\r\n  return (\r\n    // <h1>Spotify React {code ? <LoginButton onClick={logout} text=\"logout\"/> : <LoginButton onClick={login} text=\"login\"/>} </h1>\r\n    <h1>Spotify React {window.localStorage.getItem('access-token') ? <LoginButton onClick={logout} text=\"logout\"/> : <LoginButton text=\"login\" href={LOGIN_URI}/>} </h1>\r\n  )\r\n}\r\n\r\nexport default Header","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\LoginButton.js",[],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\ToolBar.js",["60"],[],"import Setting from \"./Setting\";\r\nimport ToolButton from \"./ToolButton\"\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport \"../styles/toolbar.css\"\r\nimport { faPlay, faPause, faForward, faBackward, faGear, faLock, faUnlock, faRightFromBracket } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nfunction ToolBar() {\r\n\r\n    const handleMouseOver = () => {\r\n        if (!locked) {\r\n            setShowToolbar(true);\r\n        }\r\n      };\r\n    \r\n    const handleMouseOut = () => {\r\n        if (!locked) {\r\n            setShowToolbar(false);\r\n        }\r\n    };\r\n\r\n    const handlePlayClick = async () => {\r\n        try {\r\n            await axios.put(\"https://api.spotify.com/v1/me/player/play\", null, {\r\n                headers: {\r\n                  Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\r\n                },\r\n              })\r\n            window.localStorage.setItem(\"is-playing\", \"true\")\r\n            setPlaying(true)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handlePauseClick = async () => {\r\n        try {\r\n            await axios.put(\"https://api.spotify.com/v1/me/player/pause\", null, {\r\n                headers: {\r\n                  Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\r\n                },\r\n              })\r\n            \r\n            window.localStorage.setItem(\"is-playing\", \"false\")\r\n            setPlaying(false)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handlePreviousClick = async () => {\r\n        try {\r\n            await axios.post(\"https://api.spotify.com/v1/me/player/previous\", null, {\r\n                headers: {\r\n                  Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\r\n                },\r\n              })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleNextClick = async () => {\r\n        try {\r\n            await axios.post(\"https://api.spotify.com/v1/me/player/next\", null, {\r\n                headers: {\r\n                  Authorization: `Bearer ${window.localStorage.getItem(\"access-token\")}`\r\n                },\r\n              })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleLockClick = () => {\r\n        setLocked(true)\r\n    }\r\n\r\n    const handleUnlockClick = () => {\r\n        setLocked(false)\r\n    }\r\n\r\n    const handleSettingClick = () => {\r\n        setShowSetting(showSetting ? !showSetting : true)\r\n    }\r\n\r\n    const handleExitClick = () => {\r\n        // TODO: add more authentication-related logic\r\n        window.localStorage.clear()\r\n        window.localStorage.setItem('refresh-token', '1')\r\n    }\r\n\r\n    const [showToolbar, setShowToolbar] = useState(false);\r\n    const [locked, setLocked] = useState(false);\r\n    const [playing, setPlaying] = useState(true);\r\n    const [showSetting, setShowSetting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setPlaying(window.localStorage.getItem(\"is-playing\") === 'true')\r\n    }, [window.localStorage.getItem(\"is-playing\")]);\r\n\r\n    return (\r\n        <div className=\"toolbar-wrapper\" onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n            <div className=\"toolbar\" style={{display: showToolbar ? \"flex\" : \"none\"}}>\r\n                <ToolButton icon={faBackward} onClick={handlePreviousClick}/>\r\n                {!playing ? <ToolButton icon={faPlay} onClick={handlePlayClick}/> : <ToolButton icon={faPause} onClick={handlePauseClick}/>}\r\n                <ToolButton icon={faForward} onClick={handleNextClick}/>\r\n                <ToolButton icon={faGear} onClick={handleSettingClick}/>\r\n                {!locked ? <ToolButton icon={faLock} onClick={handleLockClick}/> : <ToolButton icon={faUnlock} onClick={handleUnlockClick}/>}\r\n                <ToolButton icon={faRightFromBracket} onClick={handleExitClick}/>\r\n            </div>\r\n            {showSetting && <Setting />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToolBar","C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\ToolButton.js",[],[],"C:\\Study\\VS Code\\spotify-lyrics-sync\\client\\src\\components\\Setting.js",[],[],{"ruleId":"61","severity":1,"message":"62","line":149,"column":6,"nodeType":"63","endLine":149,"endColumn":13,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":186,"column":6,"nodeType":"63","endLine":186,"endColumn":43,"suggestions":"66"},{"ruleId":"61","severity":1,"message":"67","line":192,"column":7,"nodeType":"68","endLine":192,"endColumn":51},{"ruleId":"69","severity":1,"message":"70","line":22,"column":12,"nodeType":"71","messageId":"72","endLine":22,"endColumn":27},{"ruleId":"61","severity":1,"message":"67","line":57,"column":9,"nodeType":"68","endLine":57,"endColumn":48},{"ruleId":"61","severity":1,"message":"73","line":136,"column":8,"nodeType":"63","endLine":136,"endColumn":49,"suggestions":"74"},{"ruleId":"61","severity":1,"message":"67","line":165,"column":9,"nodeType":"68","endLine":165,"endColumn":49},{"ruleId":"75","severity":1,"message":"76","line":175,"column":17,"nodeType":"77","endLine":175,"endColumn":50},{"ruleId":"69","severity":1,"message":"78","line":21,"column":10,"nodeType":"71","messageId":"72","endLine":21,"endColumn":14},{"ruleId":"61","severity":1,"message":"67","line":101,"column":9,"nodeType":"68","endLine":101,"endColumn":50},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleTrackChange'. Either include it or remove the dependency array.","ArrayExpression",["79"],"React Hook useEffect has missing dependencies: 'currentLineIndex', 'getCurrentTrack', and 'track'. Either include them or remove the dependency array.",["80"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","no-unused-vars","'currentHiragana' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'hiragana'. Either include it or remove the dependency array.",["81"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'code' is assigned a value but never used.",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [handleTrackChange, track]",{"range":"88","text":"89"},"Update the dependencies array to be: [currentLineIndex, currentTime, getCurrentTrack, lyrics, track, trackStartTime]",{"range":"90","text":"91"},"Update the dependencies array to be: [currentLineIndex, convertedLines, lines, hiragana]",{"range":"92","text":"93"},[5300,5307],"[handleTrackChange, track]",[6580,6617],"[currentLineIndex, currentTime, getCurrentTrack, lyrics, track, trackStartTime]",[5801,5842],"[currentLineIndex, convertedLines, lines, hiragana]"]